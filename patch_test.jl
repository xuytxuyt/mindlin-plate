using ApproxOperator, JLD

import BenchmarkExample: BenchmarkExample

include("import_patch_test.jl")
ndiv = 8
elements, nodes = import_patch_test_fem("msh/patchtest_"*string(ndiv)*".msh");

n‚Çö = length(nodes)

E = 1;
ŒΩ = 0.3;
h = 0.1
D·µá = E*h^3/12/(1-ŒΩ^2)
DÀ¢ = 5/6*E*h/(2*(1+ŒΩ))

n = 4
w(x,y) = (x+y)^n
w‚ÇÅ(x,y) = n*(x+y)^abs(n-1)
w‚ÇÇ(x,y) = n*(x+y)^abs(n-1)
w‚ÇÅ‚ÇÅ(x,y) = n*(n-1)*(x+y)^abs(n-2)
w‚ÇÇ‚ÇÇ(x,y) = n*(n-1)*(x+y)^abs(n-2)
m = 2
Œ∏‚ÇÅ(x,y) = (x+y)^m
Œ∏‚ÇÇ(x,y) = (x+y)^m
Œ∏‚ÇÅ‚ÇÅ(x,y)  = m*(x+y)^abs(m-1)
Œ∏‚ÇÅ‚ÇÇ(x,y)  = m*(x+y)^abs(m-1)
Œ∏‚ÇÇ‚ÇÇ(x,y)  = m*(x+y)^abs(m-1)
Œ∏‚ÇÅ‚ÇÅ‚ÇÅ(x,y) = m*(m-1)*(x+y)^abs(m-2)
Œ∏‚ÇÅ‚ÇÅ‚ÇÇ(x,y) = m*(m-1)*(x+y)^abs(m-2)
Œ∏‚ÇÅ‚ÇÇ‚ÇÇ(x,y) = m*(m-1)*(x+y)^abs(m-2)
Œ∏‚ÇÅ‚ÇÇ‚ÇÅ(x,y) = m*(m-1)*(x+y)^abs(m-2)
Œ∏‚ÇÇ‚ÇÇ‚ÇÇ(x,y) = m*(m-1)*(x+y)^abs(m-2)
Œ∏‚ÇÇ‚ÇÇ‚ÇÅ(x,y) = m*(m-1)*(x+y)^abs(m-2)

M‚ÇÅ‚ÇÅ(x,y)= -D·µá*(Œ∏‚ÇÅ‚ÇÅ(x,y)+ŒΩ*Œ∏‚ÇÇ‚ÇÇ(x,y))
M‚ÇÅ‚ÇÇ(x,y)= -D·µá*(1-ŒΩ)*Œ∏‚ÇÅ‚ÇÇ(x,y)
M‚ÇÇ‚ÇÇ(x,y)= -D·µá*(ŒΩ*Œ∏‚ÇÅ‚ÇÅ(x,y)+Œ∏‚ÇÇ‚ÇÇ(x,y))
M‚ÇÅ‚ÇÅ‚ÇÅ(x,y)= -D·µá*(Œ∏‚ÇÅ‚ÇÅ‚ÇÅ(x,y)+ŒΩ*Œ∏‚ÇÇ‚ÇÇ‚ÇÅ(x,y))
M‚ÇÅ‚ÇÇ‚ÇÇ(x,y)= -D·µá*(1-ŒΩ)*Œ∏‚ÇÅ‚ÇÇ‚ÇÇ(x,y)
M‚ÇÅ‚ÇÇ‚ÇÅ(x,y)= -D·µá*(1-ŒΩ)*Œ∏‚ÇÅ‚ÇÇ‚ÇÅ(x,y)
M‚ÇÇ‚ÇÇ‚ÇÇ(x,y)= -D·µá*(ŒΩ*Œ∏‚ÇÅ‚ÇÅ‚ÇÇ(x,y)+Œ∏‚ÇÇ‚ÇÇ‚ÇÇ(x,y))

Q‚ÇÅ(x,y) = DÀ¢*(w‚ÇÅ(x,y)-Œ∏‚ÇÅ(x,y))
Q‚ÇÇ(x,y) = DÀ¢*(w‚ÇÇ(x,y)-Œ∏‚ÇÇ(x,y))
Q‚ÇÅ‚ÇÅ(x,y) = DÀ¢*(w‚ÇÅ‚ÇÅ(x,y)-Œ∏‚ÇÅ‚ÇÅ(x,y))
Q‚ÇÇ‚ÇÇ(x,y) = DÀ¢*(w‚ÇÇ‚ÇÇ(x,y)-Œ∏‚ÇÇ‚ÇÇ(x,y))

eval(prescribeForFem)

setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œì‚ÇÅ"])
setùù≠!(elements["Œì‚ÇÇ"])
setùù≠!(elements["Œì‚ÇÉ"])
setùù≠!(elements["Œì‚ÇÑ"])

ops = [
    Operator{:‚à´Œ∫MŒ≥QdŒ©}(:E=>E,:ŒΩ=>ŒΩ,:h=>h),
    Operator{:‚à´Œ∫MdŒ©}(:E=>E,:ŒΩ=>ŒΩ,:h=>h),
    Operator{:‚à´Œ≥QdŒ©}(:E=>E,:ŒΩ=>ŒΩ,:h=>h),
    Operator{:‚à´wqdŒ©}(),
    Operator{:‚à´‚àáMQdŒ©}(),
    Operator{:‚à´vwdŒì}(:Œ±=>1e13*E),
    Operator{:‚à´vŒ∏dŒì}(:Œ±=>1e13*E),
    Operator{:‚à´wVdŒì}(),
    Operator{:‚à´Œ∏MdŒì}(),
    Operator{:L‚ÇÇ}(:E=>E,:ŒΩ=>ŒΩ),
    Operator{:H‚ÇÅ}(:E=>E,:ŒΩ=>ŒΩ),

]
k = zeros(3*n‚Çö,3*n‚Çö)
k·µá = zeros(3*n‚Çö,3*n‚Çö)
kÀ¢ = zeros(3*n‚Çö,3*n‚Çö)
f = zeros(3*n‚Çö)
# ops[1](elements["Œ©"],k)
ops[2](elements["Œ©"],k·µá)
ops[3](elements["Œ©"],kÀ¢)
ops[4](elements["Œ©"],f)
ops[5](elements["Œ©"],f)
ops[6](elements["Œì‚ÇÅ"],k,f)
ops[6](elements["Œì‚ÇÇ"],k,f)
ops[6](elements["Œì‚ÇÉ"],k,f)
ops[6](elements["Œì‚ÇÑ"],k,f)
ops[7](elements["Œì‚ÇÅ"],k,f)
ops[7](elements["Œì‚ÇÇ"],k,f)
ops[7](elements["Œì‚ÇÉ"],k,f)
ops[7](elements["Œì‚ÇÑ"],k,f)
# ops[8](elements["Œì‚ÇÅ"],f)
# ops[8](elements["Œì‚ÇÇ"],f)
# ops[8](elements["Œì‚ÇÉ"],f)
# ops[8](elements["Œì‚ÇÑ"],f)
# ops[9](elements["Œì‚ÇÅ"],f)
# ops[9](elements["Œì‚ÇÇ"],f)
# ops[9](elements["Œì‚ÇÉ"],f)
# ops[9](elements["Œì‚ÇÑ"],f)

d = (k·µá+kÀ¢+k)\f
d‚ÇÅ = d[1:3:3*n‚Çö]
d‚ÇÇ = d[2:3:3*n‚Çö]
d‚ÇÉ = d[3:3:3*n‚Çö]

push!(nodes,:d=>d‚ÇÅ)
# push!(nodes,:d=>d‚ÇÇ)
# push!(nodes,:d=>d‚ÇÉ)
L‚ÇÇ = ops[10](elements["Œ©"])
a = log10(L‚ÇÇ)
# index = [8,16,32,64]
# XLSX.openxlsx("./xlsx/patch_test.xlsx", mode="rw") do xf
#     Sheet = xf[2]
#     ind = findfirst(n->n==ndiv,index)+1
#     Sheet["J"*string(ind)] = log10(1/ndiv)
#     Sheet["K"*string(ind)] = L‚ÇÇ
#     Sheet["L"*string(ind)] = log10(L‚ÇÇ)
# end

# d = zeros(3*n‚Çö)
# for (i,node) in enumerate(nodes)
#     x = node.x
#     y = node.y
#     z = node.z

#     d[3*i-2] = w(x,y)
#     d[3*i-1] = Œ∏‚ÇÅ(x,y)
#     d[3*i] = Œ∏‚ÇÇ(x,y)
# end

# k
# k·µá*d - f
# kÀ¢*d - f
# err1 = k·µá*d