
using Tensors, BenchmarkExample
import Gmsh: gmsh

function import_patch_test_fem(filename::String)
    gmsh.initialize()
    gmsh.open(filename)

    integrationOrder = 2
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    elements["Œ©"] = getElements(nodes, entities["Œ©"], integrationOrder)
    elements["Œì‚ÇÅ"] = getElements(nodes, entities["Œì‚ÇÅ"], integrationOrder,normal=true)
    elements["Œì‚ÇÇ"] = getElements(nodes, entities["Œì‚ÇÇ"], integrationOrder,normal=true)
    elements["Œì‚ÇÉ"] = getElements(nodes, entities["Œì‚ÇÉ"], integrationOrder,normal=true)
    elements["Œì‚ÇÑ"] = getElements(nodes, entities["Œì‚ÇÑ"], integrationOrder,normal=true)

    # gmsh.finalize()
    return elements, nodes
end
prescribeForFem = quote
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì‚ÇÅ"], :ùù≠=>:ùë†)
    push!(elements["Œì‚ÇÇ"], :ùù≠=>:ùë†)
    push!(elements["Œì‚ÇÉ"], :ùù≠=>:ùë†)
    push!(elements["Œì‚ÇÑ"], :ùù≠=>:ùë†)

    prescribe!(elements["Œì‚ÇÅ"],:g=>(x,y,z)->w(x,y))
    prescribe!(elements["Œì‚ÇÇ"],:g=>(x,y,z)->w(x,y))
    prescribe!(elements["Œì‚ÇÉ"],:g=>(x,y,z)->w(x,y))
    prescribe!(elements["Œì‚ÇÑ"],:g=>(x,y,z)->w(x,y))
    prescribe!(elements["Œì‚ÇÅ"],:Œ∏‚ÇÅ=>(x,y,z)->Œ∏‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÇ"],:Œ∏‚ÇÅ=>(x,y,z)->Œ∏‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÉ"],:Œ∏‚ÇÅ=>(x,y,z)->Œ∏‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÑ"],:Œ∏‚ÇÅ=>(x,y,z)->Œ∏‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÅ"],:Œ∏‚ÇÇ=>(x,y,z)->Œ∏‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÇ"],:Œ∏‚ÇÇ=>(x,y,z)->Œ∏‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÉ"],:Œ∏‚ÇÇ=>(x,y,z)->Œ∏‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÑ"],:Œ∏‚ÇÇ=>(x,y,z)->Œ∏‚ÇÇ(x,y))

    prescribe!(elements["Œì‚ÇÅ"],:Q‚ÇÅ=>(x,y,z)->Q‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÇ"],:Q‚ÇÅ=>(x,y,z)->Q‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÉ"],:Q‚ÇÅ=>(x,y,z)->Q‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÑ"],:Q‚ÇÅ=>(x,y,z)->Q‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÅ"],:Q‚ÇÇ=>(x,y,z)->Q‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÇ"],:Q‚ÇÇ=>(x,y,z)->Q‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÉ"],:Q‚ÇÇ=>(x,y,z)->Q‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÑ"],:Q‚ÇÇ=>(x,y,z)->Q‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÅ"],:M‚ÇÅ‚ÇÅ=>(x,y,z)->M‚ÇÅ‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÇ"],:M‚ÇÅ‚ÇÅ=>(x,y,z)->M‚ÇÅ‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÉ"],:M‚ÇÅ‚ÇÅ=>(x,y,z)->M‚ÇÅ‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÑ"],:M‚ÇÅ‚ÇÅ=>(x,y,z)->M‚ÇÅ‚ÇÅ(x,y))
    prescribe!(elements["Œì‚ÇÅ"],:M‚ÇÅ‚ÇÇ=>(x,y,z)->M‚ÇÅ‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÇ"],:M‚ÇÅ‚ÇÇ=>(x,y,z)->M‚ÇÅ‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÉ"],:M‚ÇÅ‚ÇÇ=>(x,y,z)->M‚ÇÅ‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÑ"],:M‚ÇÅ‚ÇÇ=>(x,y,z)->M‚ÇÅ‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÅ"],:M‚ÇÇ‚ÇÇ=>(x,y,z)->M‚ÇÇ‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÇ"],:M‚ÇÇ‚ÇÇ=>(x,y,z)->M‚ÇÇ‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÉ"],:M‚ÇÇ‚ÇÇ=>(x,y,z)->M‚ÇÇ‚ÇÇ(x,y))
    prescribe!(elements["Œì‚ÇÑ"],:M‚ÇÇ‚ÇÇ=>(x,y,z)->M‚ÇÇ‚ÇÇ(x,y))

    prescribe!(elements["Œ©"], :u=>(x,y,z)->w(x,y))
    # prescribe!(elements["Œ©"], :‚àÇu‚àÇx=>(x,y,z)->w‚ÇÅ(x,y))
    # prescribe!(elements["Œ©"], :‚àÇu‚àÇy=>(x,y,z)->w‚ÇÇ(x,y))
    prescribe!(elements["Œ©"], :q=>(x,y,z)->-Q‚ÇÅ‚ÇÅ(x,y)-Q‚ÇÇ‚ÇÇ(x,y))

end
