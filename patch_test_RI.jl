using ApproxOperator, JLD, XLSX

import BenchmarkExample: BenchmarkExample

include("import_patch_test.jl")

ndiv = 8
elements, nodes, nodes_s= import_patch_test_quad_RI("msh/patchtest_quad_"*string(ndiv)*".msh","./msh/patchtest_quad_"*string(ndiv)*".msh");
n·µá = length(nodes)
nÀ¢ = length(nodes_s)
E = 1;
ŒΩ = 0.3;
h = 1
D·µá = E*h^3/12/(1-ŒΩ^2)
DÀ¢ = 5/6*E*h/(2*(1+ŒΩ))

w(x,y) = -D·µá/DÀ¢*8*x-D·µá/DÀ¢*8*y+x^3+y^3+x^2*y+x*y^2
w‚ÇÅ(x,y) = -D·µá/DÀ¢*8+3*x^2+2*x*y+y^2
w‚ÇÇ(x,y) = -D·µá/DÀ¢*8+3*y^2+x^2+2*x*y
w‚ÇÅ‚ÇÅ(x,y) = 6*x+2*y
w‚ÇÇ‚ÇÇ(x,y) = 2*x+6*y
Œ∏‚ÇÅ(x,y) = 3*x^2+2*x*y+y^2
Œ∏‚ÇÇ(x,y) = 3*y^2+x^2+2*x*y
Œ∏‚ÇÅ‚ÇÅ(x,y) = 6*x+2*y
Œ∏‚ÇÅ‚ÇÇ(x,y) = 2*x+2*y
Œ∏‚ÇÇ‚ÇÇ(x,y) = 2*x+6*y

# w(x,y) = x+y+x^2/2+x*y+y^2/2
# w‚ÇÅ(x,y) = 1+x+y
# w‚ÇÇ(x,y) = 1+x+y
# w‚ÇÅ‚ÇÅ(x,y) = 1
# w‚ÇÇ‚ÇÇ(x,y) = 1
# Œ∏‚ÇÅ(x,y) = 1+x+y
# Œ∏‚ÇÇ(x,y) = 1+x+y
# Œ∏‚ÇÅ‚ÇÅ(x,y)  = 1
# Œ∏‚ÇÅ‚ÇÇ(x,y)  = 1
# Œ∏‚ÇÇ‚ÇÇ(x,y)  = 1


M‚ÇÅ‚ÇÅ(x,y)= -D·µá*(Œ∏‚ÇÅ‚ÇÅ(x,y)+ŒΩ*Œ∏‚ÇÇ‚ÇÇ(x,y))
M‚ÇÅ‚ÇÇ(x,y)= -D·µá*(1-ŒΩ)*Œ∏‚ÇÅ‚ÇÇ(x,y)
M‚ÇÇ‚ÇÇ(x,y)= -D·µá*(ŒΩ*Œ∏‚ÇÅ‚ÇÅ(x,y)+Œ∏‚ÇÇ‚ÇÇ(x,y))

Q‚ÇÅ(x,y) = DÀ¢*(w‚ÇÅ(x,y)-Œ∏‚ÇÅ(x,y))
Q‚ÇÇ(x,y) = DÀ¢*(w‚ÇÇ(x,y)-Œ∏‚ÇÇ(x,y))
Q‚ÇÅ‚ÇÅ(x,y) = DÀ¢*(w‚ÇÅ‚ÇÅ(x,y)-Œ∏‚ÇÅ‚ÇÅ(x,y))
Q‚ÇÇ‚ÇÇ(x,y) = DÀ¢*(w‚ÇÇ‚ÇÇ(x,y)-Œ∏‚ÇÇ‚ÇÇ(x,y))

eval(prescribeForFem)

setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œ©À¢"])
set‚àáùù≠!(elements["Œ©À¢"])
setùù≠!(elements["Œì‚ÇÅ"])
setùù≠!(elements["Œì‚ÇÇ"])
setùù≠!(elements["Œì‚ÇÉ"])
setùù≠!(elements["Œì‚ÇÑ"])

ops = [
    Operator{:‚à´Œ∫MŒ≥QdŒ©}(:E=>E,:ŒΩ=>ŒΩ,:h=>h),
    Operator{:‚à´Œ∫MdŒ©}(:E=>E,:ŒΩ=>ŒΩ,:h=>h),
    Operator{:‚à´Œ≥QdŒ©}(:E=>E,:ŒΩ=>ŒΩ,:h=>h),
    Operator{:‚à´wqdŒ©}(),
    Operator{:‚à´‚àáMQdŒ©}(),
    Operator{:‚à´vwdŒì}(:Œ±=>1e13*E),
    Operator{:‚à´vŒ∏dŒì}(:Œ±=>1e13*E),
    Operator{:‚à´wVdŒì}(),
    Operator{:‚à´Œ∏MdŒì}(),
    Operator{:L‚ÇÇ}(:E=>E,:ŒΩ=>ŒΩ),
    Operator{:H‚ÇÅ}(:E=>E,:ŒΩ=>ŒΩ),

]
k = zeros(3*n·µá,3*n·µá)
k·µá = zeros(3*n·µá,3*n·µá)
kÀ¢ = zeros(3*nÀ¢,3*nÀ¢)
f = zeros(3*n·µá)
# ops[1](elements["Œ©"],k)
ops[2](elements["Œ©"],k·µá)
ops[3](elements["Œ©À¢"],kÀ¢)
# ops[3](elements["Œ©"],kÀ¢)
# ops[4](elements["Œ©"],f)
# ops[5](elements["Œ©"],f)
ops[6](elements["Œì‚ÇÅ"],k,f)
ops[6](elements["Œì‚ÇÇ"],k,f)
ops[6](elements["Œì‚ÇÉ"],k,f)
ops[6](elements["Œì‚ÇÑ"],k,f)
# ops[7](elements["Œì‚ÇÅ"],k,f)
# ops[7](elements["Œì‚ÇÇ"],k,f)
# ops[7](elements["Œì‚ÇÉ"],k,f)
# ops[7](elements["Œì‚ÇÑ"],k,f)
# ops[8](elements["Œì‚ÇÅ"],f)
# ops[8](elements["Œì‚ÇÇ"],f)
# ops[8](elements["Œì‚ÇÉ"],f)
# ops[8](elements["Œì‚ÇÑ"],f)
ops[9](elements["Œì‚ÇÅ"],f)
ops[9](elements["Œì‚ÇÇ"],f)
ops[9](elements["Œì‚ÇÉ"],f)
ops[9](elements["Œì‚ÇÑ"],f)

d = (k·µá+kÀ¢+k)\f
d‚ÇÅ = d[1:3:3*n·µá]
d‚ÇÇ = d[2:3:3*n·µá]
d‚ÇÉ = d[3:3:3*n·µá]

push!(nodes,:d=>d‚ÇÅ)
# push!(nodes,:d=>d‚ÇÇ)
# push!(nodes,:d=>d‚ÇÉ)
setùù≠!(elements["Œ©·µç"])
set‚àáùù≠!(elements["Œ©·µç"])
prescribe!(elements["Œ©·µç"],:u=>(x,y,z)->w(x,y))
# prescribe!(elements["Œ©·µç"],:u=>(x,y,z)->Œ∏‚ÇÅ(x,y))
L‚ÇÇ = ops[10](elements["Œ©·µç"])
a = log10(L‚ÇÇ)
index = [8,16,32,64]
XLSX.openxlsx("./xlsx/patch_test.xlsx", mode="rw") do xf
    Sheet = xf[7]
    ind = findfirst(n->n==ndiv,index)+1
    Sheet["F"*string(ind)] = log10(1/ndiv)
    Sheet["G"*string(ind)] = L‚ÇÇ
    Sheet["H"*string(ind)] = log10(L‚ÇÇ)
end

# d = zeros(3*n‚Çö)
# for (i,node) in enumerate(nodes)
#     x = node.x
#     y = node.y
#     z = node.z

#     d[3*i-2] = w(x,y)
#     d[3*i-1] = Œ∏‚ÇÅ(x,y)
#     d[3*i] = Œ∏‚ÇÇ(x,y)
# end

# k
# k·µá*d - f
# kÀ¢*d - f
# err1 = k·µá*d